[
  {
    "objectID": "01-intro.html",
    "href": "01-intro.html",
    "title": "Introduction",
    "section": "",
    "text": "MixedModels.jl is part of the JuliaStats ecosystem and so shares a number of interface and design elements with GLM.jl. MixedModels.jl can also be viewed as the next step in the research programme behind the R package lme4 (and further back, nlme). The focus of development is on linear mixed effects models with unconstrained covariance matrices, with a secondary focus on generalized linear mixed effects models. We’ll come back to this focus later, when we discuss limitations of the software. For now, let us start off with a simple mixed model.",
    "crumbs": [
      "MixedModels.jl"
    ]
  },
  {
    "objectID": "01-intro.html#optimization-results",
    "href": "01-intro.html#optimization-results",
    "title": "Introduction",
    "section": "Optimization results",
    "text": "Optimization results\nFor more technically oriented users and debugging problematic models, the fitted model also includes information about its fit:\n\nfm1.optsum\n\n\n\n\n\n\n\n\n\nInitialization\n\n\n\nInitial parameter vector\n[1.0, 1.0, 1.0]\n\n\nInitial objective value\n241905.85361894374\n\n\nOptimizer settings\n\n\n\nOptimizer (from NLopt)\nLN_BOBYQA\n\n\nLower bounds\n[0.0, 0.0, 0.0]\n\n\nftol_rel\n1.0e-12\n\n\nftol_abs\n1.0e-8\n\n\nxtol_rel\n0.0\n\n\nxtol_abs\n[1.0e-10, 1.0e-10, 1.0e-10]\n\n\ninitial_step\n[0.75, 0.75, 0.75]\n\n\nmaxfeval\n-1\n\n\nmaxtime\n-1.0\n\n\nResult\n\n\n\nFunction evaluations\n97\n\n\nFinal parameter vector\n[0.2775, 0.4341, 0.0669]\n\n\nFinal objective value\n237553.9858\n\n\nReturn code\nFTOL_REACHED",
    "crumbs": [
      "MixedModels.jl"
    ]
  },
  {
    "objectID": "01-intro.html#best-linear-unbiased-predictions",
    "href": "01-intro.html#best-linear-unbiased-predictions",
    "title": "Introduction",
    "section": "Best linear unbiased predictions",
    "text": "Best linear unbiased predictions\nWe can also examine the best linear unbiased predictions (BLUPS, i.e. conditional modes) of the fitted model:\n\nranef(fm1) # gives a compact mathematical representation\n\n3-element Vector{Matrix{Float64}}:\n [0.16774140235737575 -0.04482701285162444 … 0.1382442938500027 0.2650774864010803]\n [0.3871977014122401 -0.4543515141805431 … 0.5663070246200219 -0.2322550813384579]\n [0.01925209823588375 -0.03142469083851408 … -0.03943347505732836 0.010869167979893487]\n\n\n\nre = raneftables(fm1) # gives a NamedTuple of tables for each grouping variable\n\n(s = @NamedTuple{s::String, (Intercept)::Float64}[(s = \"S0001\", var\"(Intercept)\" = 0.16774140235737575), (s = \"S0002\", var\"(Intercept)\" = -0.04482701285162444), (s = \"S0003\", var\"(Intercept)\" = 0.31575935321258014), (s = \"S0004\", var\"(Intercept)\" = 0.24940732776784375), (s = \"S0005\", var\"(Intercept)\" = 0.050863352996870996), (s = \"S0006\", var\"(Intercept)\" = 0.10070590858725184), (s = \"S0007\", var\"(Intercept)\" = 0.49346379654842415), (s = \"S0008\", var\"(Intercept)\" = 0.21230071437874554), (s = \"S0009\", var\"(Intercept)\" = 0.4332979595948472), (s = \"S0010\", var\"(Intercept)\" = 0.34743864199091984)  …  (s = \"S2963\", var\"(Intercept)\" = -0.0749327557261207), (s = \"S2964\", var\"(Intercept)\" = -0.07639856541116313), (s = \"S2965\", var\"(Intercept)\" = -0.012697609893877363), (s = \"S2966\", var\"(Intercept)\" = -0.059683628597548756), (s = \"S2967\", var\"(Intercept)\" = -0.4776209481575346), (s = \"S2968\", var\"(Intercept)\" = -0.038080766921188454), (s = \"S2969\", var\"(Intercept)\" = 0.013164291227622239), (s = \"S2970\", var\"(Intercept)\" = 0.15284748072859305), (s = \"S2971\", var\"(Intercept)\" = 0.1382442938500027), (s = \"S2972\", var\"(Intercept)\" = 0.2650774864010803)], d = @NamedTuple{d::String, (Intercept)::Float64}[(d = \"I0001\", var\"(Intercept)\" = 0.3871977014122401), (d = \"I0006\", var\"(Intercept)\" = -0.4543515141805431), (d = \"I0007\", var\"(Intercept)\" = 0.6941271319185779), (d = \"I0008\", var\"(Intercept)\" = -0.6556985316701274), (d = \"I0012\", var\"(Intercept)\" = 0.2232270929725692), (d = \"I0013\", var\"(Intercept)\" = 0.35851765095513616), (d = \"I0014\", var\"(Intercept)\" = 0.36727982802972875), (d = \"I0015\", var\"(Intercept)\" = -0.37841262336526776), (d = \"I0017\", var\"(Intercept)\" = 0.4490431092879482), (d = \"I0018\", var\"(Intercept)\" = -0.2130290212029939)  …  (d = \"I2143\", var\"(Intercept)\" = 0.46453563052639246), (d = \"I2145\", var\"(Intercept)\" = -0.5103159237956026), (d = \"I2146\", var\"(Intercept)\" = 0.24093840057454008), (d = \"I2147\", var\"(Intercept)\" = -0.609469079727866), (d = \"I2149\", var\"(Intercept)\" = -0.2569369866698443), (d = \"I2152\", var\"(Intercept)\" = -0.14863445582416115), (d = \"I2153\", var\"(Intercept)\" = -0.45824502947271933), (d = \"I2156\", var\"(Intercept)\" = -0.5981638095970262), (d = \"I2157\", var\"(Intercept)\" = 0.5663070246200219), (d = \"I2160\", var\"(Intercept)\" = -0.2322550813384579)], dept = @NamedTuple{dept::String, (Intercept)::Float64}[(dept = \"D01\", var\"(Intercept)\" = 0.01925209823588375), (dept = \"D02\", var\"(Intercept)\" = -0.03142469083851408), (dept = \"D03\", var\"(Intercept)\" = 0.026990446729129435), (dept = \"D04\", var\"(Intercept)\" = 0.08635016621351274), (dept = \"D05\", var\"(Intercept)\" = 0.04253962436019779), (dept = \"D06\", var\"(Intercept)\" = -0.06123971074400431), (dept = \"D07\", var\"(Intercept)\" = 0.03799512248138028), (dept = \"D08\", var\"(Intercept)\" = 0.10707218145634924), (dept = \"D09\", var\"(Intercept)\" = -0.031304654966880036), (dept = \"D10\", var\"(Intercept)\" = -0.1307501138466036), (dept = \"D11\", var\"(Intercept)\" = -0.05345402697344361), (dept = \"D12\", var\"(Intercept)\" = 0.01653786497082539), (dept = \"D14\", var\"(Intercept)\" = -0.03943347505732836), (dept = \"D15\", var\"(Intercept)\" = 0.010869167979893487)])\n\n\n\nre[:dept]\n\nTable with 2 columns and 14 rows:\n      dept  (Intercept)\n    ┌──────────────────\n 1  │ D01   0.0192521\n 2  │ D02   -0.0314247\n 3  │ D03   0.0269904\n 4  │ D04   0.0863502\n 5  │ D05   0.0425396\n 6  │ D06   -0.0612397\n 7  │ D07   0.0379951\n 8  │ D08   0.107072\n 9  │ D09   -0.0313047\n 10 │ D10   -0.13075\n 11 │ D11   -0.053454\n 12 │ D12   0.0165379\n 13 │ D14   -0.0394335\n 14 │ D15   0.0108692\n\n\nSimilarly, condVar and condVartables provide similar results for the conditional variances, which can be used to construct prediction intervals. Note that this quantity is slightly more challenging to compute, so the next code chunk can be quite slow for large and/or complex models.\n\ncv = condVartables(fm1)\n\n(s = (s = [\"S0001\", \"S0002\", \"S0003\", \"S0004\", \"S0005\", \"S0006\", \"S0007\", \"S0008\", \"S0009\", \"S0010\"  …  \"S2963\", \"S2964\", \"S2965\", \"S2966\", \"S2967\", \"S2968\", \"S2969\", \"S2970\", \"S2971\", \"S2972\"], σ = [(0.2858671228362245,), (0.3040165017502583,), (0.22821165533498675,), (0.2578004425103726,), (0.2860221041711748,), (0.25793963311878376,), (0.2649009415162111,), (0.27833696665010815,), (0.2522474519336828,), (0.22880839419265198,)  …  (0.20261432307540148,), (0.15345463114059987,), (0.18906069725437913,), (0.23644930010448192,), (0.16864269562394849,), (0.132482319658741,), (0.21568697330755854,), (0.15989935597851845,), (0.1970392691204506,), (0.17611124660034733,)], ρ = [(), (), (), (), (), (), (), (), (), ()  …  (), (), (), (), (), (), (), (), (), ()]), d = (d = [\"I0001\", \"I0006\", \"I0007\", \"I0008\", \"I0012\", \"I0013\", \"I0014\", \"I0015\", \"I0017\", \"I0018\"  …  \"I2143\", \"I2145\", \"I2146\", \"I2147\", \"I2149\", \"I2152\", \"I2153\", \"I2156\", \"I2157\", \"I2160\"], σ = [(0.29447193578517417,), (0.1998489863854152,), (0.19760667793253092,), (0.1527043969316495,), (0.20500621849854034,), (0.18323915120884238,), (0.20826361545342348,), (0.1379769401014668,), (0.0991637673510267,), (0.2589837320741506,)  …  (0.2709897676057369,), (0.27856001288516263,), (0.2642022156832947,), (0.1135259649977105,), (0.21483200256076004,), (0.28061051441897883,), (0.21640462394420396,), (0.26558786177554317,), (0.18875478926313752,), (0.12464418506317759,)], ρ = [(), (), (), (), (), (), (), (), (), ()  …  (), (), (), (), (), (), (), (), (), ()]), dept = (dept = [\"D01\", \"D02\", \"D03\", \"D04\", \"D05\", \"D06\", \"D07\", \"D08\", \"D09\", \"D10\", \"D11\", \"D12\", \"D14\", \"D15\"], σ = [(0.05342326269418921,), (0.056952844171391834,), (0.053094116815828214,), (0.041891800931267716,), (0.055366070778972126,), (0.04470931534818489,), (0.05357594671331021,), (0.05037357874667522,), (0.05202188180710211,), (0.04767962130821475,), (0.052241617344059924,), (0.04219066031585405,), (0.05298726732192016,), (0.04862598365500502,)], ρ = [(), (), (), (), (), (), (), (), (), (), (), (), (), ()]))\n\n\n\n# this output still isn't pretty, but we're working on it!\ncv[:dept]\n\n(dept = [\"D01\", \"D02\", \"D03\", \"D04\", \"D05\", \"D06\", \"D07\", \"D08\", \"D09\", \"D10\", \"D11\", \"D12\", \"D14\", \"D15\"], σ = [(0.05342326269418921,), (0.056952844171391834,), (0.053094116815828214,), (0.041891800931267716,), (0.055366070778972126,), (0.04470931534818489,), (0.05357594671331021,), (0.05037357874667522,), (0.05202188180710211,), (0.04767962130821475,), (0.052241617344059924,), (0.04219066031585405,), (0.05298726732192016,), (0.04862598365500502,)], ρ = [(), (), (), (), (), (), (), (), (), (), (), (), (), ()])\n\n\nAt this point, it becomes convenient to place everything into a dataframe so that we can easily manipulate the relevant quantities.\n\nusing DataFrames\ndept = DataFrame(cv[:dept])\n\n\n14×3 DataFrame\n\n\n\nRow\ndept\nσ\nρ\n\n\n\nString\nTuple…\nTuple{}\n\n\n\n\n1\nD01\n(0.0534233,)\n()\n\n\n2\nD02\n(0.0569528,)\n()\n\n\n3\nD03\n(0.0530941,)\n()\n\n\n4\nD04\n(0.0418918,)\n()\n\n\n5\nD05\n(0.0553661,)\n()\n\n\n6\nD06\n(0.0447093,)\n()\n\n\n7\nD07\n(0.0535759,)\n()\n\n\n8\nD08\n(0.0503736,)\n()\n\n\n9\nD09\n(0.0520219,)\n()\n\n\n10\nD10\n(0.0476796,)\n()\n\n\n11\nD11\n(0.0522416,)\n()\n\n\n12\nD12\n(0.0421907,)\n()\n\n\n13\nD14\n(0.0529873,)\n()\n\n\n14\nD15\n(0.048626,)\n()\n\n\n\n\n\n\n\nLet’s construct prediction intervals:\n\nselect!(dept, :dept, :σ =&gt; ByRow(first) =&gt; :condvar)\nleftjoin!(dept, DataFrame(re[:dept]); on=:dept)\n\n\n14×3 DataFrame\n\n\n\nRow\ndept\ncondvar\n(Intercept)\n\n\n\nString\nFloat64\nFloat64?\n\n\n\n\n1\nD01\n0.0534233\n0.0192521\n\n\n2\nD02\n0.0569528\n-0.0314247\n\n\n3\nD03\n0.0530941\n0.0269904\n\n\n4\nD04\n0.0418918\n0.0863502\n\n\n5\nD05\n0.0553661\n0.0425396\n\n\n6\nD06\n0.0447093\n-0.0612397\n\n\n7\nD07\n0.0535759\n0.0379951\n\n\n8\nD08\n0.0503736\n0.107072\n\n\n9\nD09\n0.0520219\n-0.0313047\n\n\n10\nD10\n0.0476796\n-0.13075\n\n\n11\nD11\n0.0522416\n-0.053454\n\n\n12\nD12\n0.0421907\n0.0165379\n\n\n13\nD14\n0.0529873\n-0.0394335\n\n\n14\nD15\n0.048626\n0.0108692\n\n\n\n\n\n\n\n\nselect!(dept, \"dept\", \"(Intercept)\" =&gt; \"blup\", \"condvar\")\ntransform!(dept,\n           [:blup, :condvar] =&gt; ByRow((x,y) -&gt; x - 1.96 * y) =&gt; :lower,\n           [:blup, :condvar] =&gt; ByRow((x,y) -&gt; x + 1.96 * y) =&gt; :upper)\n\n\n14×5 DataFrame\n\n\n\nRow\ndept\nblup\ncondvar\nlower\nupper\n\n\n\nString\nFloat64?\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\nD01\n0.0192521\n0.0534233\n-0.0854575\n0.123962\n\n\n2\nD02\n-0.0314247\n0.0569528\n-0.143052\n0.0802029\n\n\n3\nD03\n0.0269904\n0.0530941\n-0.077074\n0.131055\n\n\n4\nD04\n0.0863502\n0.0418918\n0.00424224\n0.168458\n\n\n5\nD05\n0.0425396\n0.0553661\n-0.0659779\n0.151057\n\n\n6\nD06\n-0.0612397\n0.0447093\n-0.14887\n0.0263905\n\n\n7\nD07\n0.0379951\n0.0535759\n-0.0670137\n0.143004\n\n\n8\nD08\n0.107072\n0.0503736\n0.00833997\n0.205804\n\n\n9\nD09\n-0.0313047\n0.0520219\n-0.133268\n0.0706582\n\n\n10\nD10\n-0.13075\n0.0476796\n-0.224202\n-0.0372981\n\n\n11\nD11\n-0.053454\n0.0522416\n-0.155848\n0.0489395\n\n\n12\nD12\n0.0165379\n0.0421907\n-0.0661558\n0.0992316\n\n\n13\nD14\n-0.0394335\n0.0529873\n-0.143289\n0.0644216\n\n\n14\nD15\n0.0108692\n0.048626\n-0.0844378\n0.106176",
    "crumbs": [
      "MixedModels.jl"
    ]
  },
  {
    "objectID": "01-intro.html#measures-of-model-fit",
    "href": "01-intro.html#measures-of-model-fit",
    "title": "Introduction",
    "section": "Measures of model fit",
    "text": "Measures of model fit\nMixedModels.jl provides methods for the standard functions aic, aicc, bic, deviance, fitted, logliklihood, nobs, residuals.\nThe deviance is computed as -2 loglikelihood and is thus missing an additive constant for the saturated model. However, defining that constant is challenging for mixed models (what is the saturated model? do you saturate via the fixed or the random effects?) and that constant cancels out in the relevant computations.\nMixedModels.jl intentionally does not provide methods for r2 and adjr2. These quantities are notoriously difficult to define in a completely satisfactory way for mixed models and we, the developers, felt uncomfortable giving our implicit endorsement by defining them as part of the core package. That said, there is an implementation of a naive definition of the coefficient of determination in MixedModelsExtras.jl because it is a commonly requested measure and I felt that it was better to have a well-tested implementation than have users handroll their own buggy implementation of an already problematic measure.",
    "crumbs": [
      "MixedModels.jl"
    ]
  },
  {
    "objectID": "01-intro.html#very-few-options-for-covariance-structure",
    "href": "01-intro.html#very-few-options-for-covariance-structure",
    "title": "Introduction",
    "section": "Very few options for covariance structure",
    "text": "Very few options for covariance structure\nNonetheless, there is no free lunch and the tradeoff that we make is that it is much more difficult to formulate constraints on the covariance structure (whether on the random effects or on the response/residuals) in our formulation. MixedModels.jl currently supports precisely two covariance structures explicitly:\n\nunconstrained\nzero correlation (diagonal covariance structure)\n\nIt is also possible to express some models with compound symmetry by clever manipulation of the formula syntax (i.e. (1+c|g) for categorical c with compound symmetry is the same as (1|g) + (1|g&c)).\nMixedModels.jl does support constraining the residual variance to known scalar value, which is useful in meta-analysis.\nMetida.jl may provide an alternative if this functionality is required (not an endorsement).",
    "crumbs": [
      "MixedModels.jl"
    ]
  },
  {
    "objectID": "01-intro.html#no-support-for-generalized-linear-mixed-models-with-a-dispersion-parameter",
    "href": "01-intro.html#no-support-for-generalized-linear-mixed-models-with-a-dispersion-parameter",
    "title": "Introduction",
    "section": "No support for generalized linear mixed models with a dispersion parameter",
    "text": "No support for generalized linear mixed models with a dispersion parameter\nWhile MixedModels.jl does nominally support any GLM family and link function support by GLM.jl, the results for model families with a dispersion parameter (normal with non-identity link, gamma, inverse Gaussian) are known to be incorrect. The package issues a warning if you attempt to fit such models.",
    "crumbs": [
      "MixedModels.jl"
    ]
  },
  {
    "objectID": "01-intro.html#no-support-for-polytomous-responses",
    "href": "01-intro.html#no-support-for-polytomous-responses",
    "title": "Introduction",
    "section": "No support for polytomous responses",
    "text": "No support for polytomous responses\nMultinomial and ordered responses are not supported. I am unaware of a Julia package offering support for this.",
    "crumbs": [
      "MixedModels.jl"
    ]
  },
  {
    "objectID": "01-intro.html#no-support-for-regularization-of-the-fixed-effects",
    "href": "01-intro.html#no-support-for-regularization-of-the-fixed-effects",
    "title": "Introduction",
    "section": "No support for regularization of the fixed effects",
    "text": "No support for regularization of the fixed effects\nHighDimMixedModels.jl may provide an alternative if this functionality is required (not an endorsement).",
    "crumbs": [
      "MixedModels.jl"
    ]
  },
  {
    "objectID": "01-intro.html#no-support-for-generalized-additive-mixed-models",
    "href": "01-intro.html#no-support-for-generalized-additive-mixed-models",
    "title": "Introduction",
    "section": "No support for generalized additive mixed models",
    "text": "No support for generalized additive mixed models\nGeneralized additive models can be expressed a mixed model, so supporting this would require “only” adding a translation layer.",
    "crumbs": [
      "MixedModels.jl"
    ]
  },
  {
    "objectID": "01-intro.html#no-support-for-nonlinear-mixed-effects-models",
    "href": "01-intro.html#no-support-for-nonlinear-mixed-effects-models",
    "title": "Introduction",
    "section": "No support for nonlinear mixed effects models",
    "text": "No support for nonlinear mixed effects models\nPumas.jl (commercial) provides this.",
    "crumbs": [
      "MixedModels.jl"
    ]
  },
  {
    "objectID": "03-extensions.html",
    "href": "03-extensions.html",
    "title": "Additional Functionality in Other Packages",
    "section": "",
    "text": "MixedModelsExtras.jl\n\n\nRegressionFormulae.jl\n\n\nBoxCox.jl\n\n\nEffects.jl\n\n\nStandardizedPredictors.jl\n\n\nRCall.jl and JellyMe4.jl",
    "crumbs": [
      "Extension Packages"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mixed Effects Models in Julia",
    "section": "",
    "text": "This website contains the course materials for an introduction to mixed effects models in Julia using MixedModels.jl.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "Mixed Effects Models in Julia",
    "section": "Prerequisites",
    "text": "Prerequisites\nThe material here assumes a basic proficiency with the Julia language, including a working Julia installation with Julia 1.9+.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#installation-of-course-materials",
    "href": "index.html#installation-of-course-materials",
    "title": "Mixed Effects Models in Julia",
    "section": "Installation of Course Materials",
    "text": "Installation of Course Materials\n\nJulia packages used in the examples\nThe source code for everything can be downloaded from GitHub. After downloading the materials, you should install the necessary Julia packages.\n\n\n\n\n\n\nTip\n\n\n\nWhen copying and pasting into the Julia REPL, you don’t need to remove the julia&gt; prompt from the examples. The Julia REPL will detect the prompt and strip it for you.\n\n\n~/economics2024$ julia\n\njulia&gt; using Pkg\n\njulia&gt; Pkg.activate(\".\")\n  Activating project at `~/economics2024`\n\njulia&gt; Pkg.instantiate()\n&lt; lots of output &gt;\n\njulia&gt; using Econ2024\n\njulia&gt; Econ2024.movielens_download() # note: this is a very large dataset!\n[ Info: Downloading data\n[ Info: Extracting and saving ratings\n[ Info: Extracting movies that are in the ratings table\n[ Info: Extracting and saving README\n2-element Vector{String}:\n \"~/.julia/scratchspa\" ⋯ 28 bytes ⋯ \"3d4d5d689f47/data/ratings.arrow\"\n \"~/.julia/scratchspa\" ⋯ 27 bytes ⋯ \"-3d4d5d689f47/data/movies.arrow\"\n\njulia&gt; exit()\n\n\n\n\n\n\nImportant\n\n\n\nPlease check that you have the most recent version of the materials directly before the course.\n\n\n\n\nRendering the course website\nThis repository uses Quarto with the Julia code execution supplied by QuartoNotebookRunner.jl, which requires Quarto 1.5+.\nAs of early May 2024, Quarto 1.5 is only available as a preview release, which you’ll need to download from GitHub. Under each release’s “Assets”, you can find platform-specific installers.\n\n\n\n\n\n\nTip\n\n\n\nYou don’t need to install or use quarto to view the course materials. Everything, including the example code, is visible on the website, with links to the underlying source code for the entire page.\n\n\n~/economics2024$ quarto preview\n\n&lt; lots of output &gt;\n\nThis page was rendered from git revision 71b8d13\n.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "02-plotting.html",
    "href": "02-plotting.html",
    "title": "Plotting",
    "section": "",
    "text": "In the following, we’ll be using the Makie ecosystem for plottig. There are multiple major plotting ecosystems in Julia and it’s largely a matter of personal preference which to use. However, some plotting tools and packages only exist in one ecosystem, such as MixedModelsMakie.jl for several convenient plotting functions related to MixedModels.jl.",
    "crumbs": [
      "Visualization"
    ]
  },
  {
    "objectID": "02-plotting.html#fixed-effects",
    "href": "02-plotting.html#fixed-effects",
    "title": "Plotting",
    "section": "Fixed Effects",
    "text": "Fixed Effects",
    "crumbs": [
      "Visualization"
    ]
  },
  {
    "objectID": "02-plotting.html#blups",
    "href": "02-plotting.html#blups",
    "title": "Plotting",
    "section": "BLUPs",
    "text": "BLUPs",
    "crumbs": [
      "Visualization"
    ]
  },
  {
    "objectID": "04-bootstrap.html#shortest-coverage-highest-density-interval",
    "href": "04-bootstrap.html#shortest-coverage-highest-density-interval",
    "title": "The Parametric Bootstrap",
    "section": "Shortest coverage / highest density interval",
    "text": "Shortest coverage / highest density interval",
    "crumbs": [
      "Bootstrap"
    ]
  },
  {
    "objectID": "04-bootstrap.html#equal-tail-probability-quantile-interval",
    "href": "04-bootstrap.html#equal-tail-probability-quantile-interval",
    "title": "The Parametric Bootstrap",
    "section": "Equal-tail probability / quantile interval",
    "text": "Equal-tail probability / quantile interval",
    "crumbs": [
      "Bootstrap"
    ]
  },
  {
    "objectID": "04-bootstrap.html#distributed-computing",
    "href": "04-bootstrap.html#distributed-computing",
    "title": "The Parametric Bootstrap",
    "section": "Distributed computing",
    "text": "Distributed computing",
    "crumbs": [
      "Bootstrap"
    ]
  },
  {
    "objectID": "04-bootstrap.html#lower-tolerances",
    "href": "04-bootstrap.html#lower-tolerances",
    "title": "The Parametric Bootstrap",
    "section": "Lower tolerances",
    "text": "Lower tolerances",
    "crumbs": [
      "Bootstrap"
    ]
  },
  {
    "objectID": "99-wilkinson-notation.html",
    "href": "99-wilkinson-notation.html",
    "title": "Wilkinson-Rogers (1973) notation for models of (co)variance",
    "section": "",
    "text": "“Addition” (+) indicates additive, i.e., main effects: a + b indicates main effects of a and b.\n“Multiplication” (*) indicates crossing: main effects and interactions between two terms: a * b indicates main effects of a and b as well as their interaction.\nUsual algebraic rules apply (associativity and distributivity):\n\n(a + b) * c is equivalent to a * c + b * c\na * b * c corresponds to main effects of a, b, and c, as well as all three two-way interactions and the three-way interaction.\n\nCategorical terms are expanded into the associated indicators/contrast variables.\nTilde (~) is used to separate response from predictors.\nThe intercept is indicated by 1.\ny ~ 1 + (a + b) * c is read as:\n\nThe response variable is y.\nThe model contains an intercept.\nThe model contains main effects of a, b, and c.\nThe model contains interactions between a and c and between b and c but not a and b\n\nWe extend this notation for mixed-effects models with the grouping notation (|):\n\n(1 + a | subject) indicates “by-subject random effects for the intercept and main effect a”.\nThis is in line with the usual statistical reading of | as “conditional on”.\n\n\n\n\n\nModels fit with MixedModels.jl are generally linear mixed-effects models with unconstrained random effects covariance matrices and homoskedastic, normally distributed residuals. Under these assumptions, the model specification\nresponse ~ 1 + (age + sex) * education * n_children  + (1 | subject)\ncorresponds to the statistical model\n\\[\\begin{align*}\n\\left(Y |\\mathcal{B}=b\\right) &\\sim N\\left(X\\beta + Zb, \\sigma^2 I \\right) \\\\\n\\mathcal{B} &\\sim N\\left(0, G\\right)\n\\end{align*}\\]\nfor which we wish to obtain the maximum-likelihood estimates for \\(G\\) and thus the fixed-effects \\(\\beta\\).\n\nThe model contains no restrictions on \\(G\\), except that it is positive semidefinite.\nThe response Y is the value of a given response.\nThe fixed-effects design matrix X consists of columns for\n\nthe intercept, age, sex, education, and number of children (contrast coded as appropriate)\nthe interaction of all lower order terms, excluding interactions between age and sex\n\nThe random-effects design matrix Z includes a column for\n\nthe intercept for each subject",
    "crumbs": [
      "Formula Syntax"
    ]
  },
  {
    "objectID": "99-wilkinson-notation.html#general-rules",
    "href": "99-wilkinson-notation.html#general-rules",
    "title": "Wilkinson-Rogers (1973) notation for models of (co)variance",
    "section": "",
    "text": "“Addition” (+) indicates additive, i.e., main effects: a + b indicates main effects of a and b.\n“Multiplication” (*) indicates crossing: main effects and interactions between two terms: a * b indicates main effects of a and b as well as their interaction.\nUsual algebraic rules apply (associativity and distributivity):\n\n(a + b) * c is equivalent to a * c + b * c\na * b * c corresponds to main effects of a, b, and c, as well as all three two-way interactions and the three-way interaction.\n\nCategorical terms are expanded into the associated indicators/contrast variables.\nTilde (~) is used to separate response from predictors.\nThe intercept is indicated by 1.\ny ~ 1 + (a + b) * c is read as:\n\nThe response variable is y.\nThe model contains an intercept.\nThe model contains main effects of a, b, and c.\nThe model contains interactions between a and c and between b and c but not a and b\n\nWe extend this notation for mixed-effects models with the grouping notation (|):\n\n(1 + a | subject) indicates “by-subject random effects for the intercept and main effect a”.\nThis is in line with the usual statistical reading of | as “conditional on”.",
    "crumbs": [
      "Formula Syntax"
    ]
  },
  {
    "objectID": "99-wilkinson-notation.html#mixed-models-in-wilkinson-rogers-and-mathematical-notation",
    "href": "99-wilkinson-notation.html#mixed-models-in-wilkinson-rogers-and-mathematical-notation",
    "title": "Wilkinson-Rogers (1973) notation for models of (co)variance",
    "section": "",
    "text": "Models fit with MixedModels.jl are generally linear mixed-effects models with unconstrained random effects covariance matrices and homoskedastic, normally distributed residuals. Under these assumptions, the model specification\nresponse ~ 1 + (age + sex) * education * n_children  + (1 | subject)\ncorresponds to the statistical model\n\\[\\begin{align*}\n\\left(Y |\\mathcal{B}=b\\right) &\\sim N\\left(X\\beta + Zb, \\sigma^2 I \\right) \\\\\n\\mathcal{B} &\\sim N\\left(0, G\\right)\n\\end{align*}\\]\nfor which we wish to obtain the maximum-likelihood estimates for \\(G\\) and thus the fixed-effects \\(\\beta\\).\n\nThe model contains no restrictions on \\(G\\), except that it is positive semidefinite.\nThe response Y is the value of a given response.\nThe fixed-effects design matrix X consists of columns for\n\nthe intercept, age, sex, education, and number of children (contrast coded as appropriate)\nthe interaction of all lower order terms, excluding interactions between age and sex\n\nThe random-effects design matrix Z includes a column for\n\nthe intercept for each subject",
    "crumbs": [
      "Formula Syntax"
    ]
  }
]